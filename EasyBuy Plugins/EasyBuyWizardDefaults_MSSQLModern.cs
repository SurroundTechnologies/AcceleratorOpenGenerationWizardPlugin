using A4DN.CF.WizardShared;
using A4DN.Core.BOS.Base;
using A4DN.Core.BOS.FrameworkEntity;
using GenerationWizardPlugin.EBHelpers;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace GenerationWizardPlugin
{
	public class EasyBuyWizardDefaults_MSSQLModern : AB_IGenerationWizardDefault
	{
		internal enum Mode { InitialSetup, ColumnsChanged };

		// Generation Wizard Shared Data
		internal readonly AB_GenerationWizardShared WizardShared = new AB_GenerationWizardShared();

		#region Required Methods

		public void am_Initialize(AB_GenerationWizardShared generationWizardShared)
		{
			// Relationships are pulled from the database access routes. If no relationships are defined on the database, you can define the relationships with the GetDatabaseRelationships method.
			//generationWizardShared.ap_DatabaseRelationships = EasyBuyHelpers.GetDatabaseRelationships(DBBrand.MSSQL, "dbo");

			EasyBuyHelpers.InitializeExcelConstants(DBType.Modern);
		}

		public bool am_PromptForKeysIfNoneSpecified(AB_GenerationModuleEntity ModuleEntity)
		{
			return true;
		}

		public bool am_AllowAddModule(AB_GenerationModuleEntity moduleEntity)
		{
			switch (moduleEntity.FileName)
			{
				//Add a case for every module that shouldn't be allowed
				case "sysdiagrams":
					return false;

				default:
					return true;
			}
		}

		public void am_SetDefaultForModule(AB_GenerationModuleEntity moduleEntity)
		{
			if (moduleEntity == null || moduleEntity.AllColumns == null) return;

			// Set Module Level Rules before Column Rules
			SetModuleRulesBeforeColumnRules(Mode.InitialSetup, moduleEntity);

			// Set Generation defaults for each Column
			foreach (var viewColumnEntity in moduleEntity.AllColumns)
				SetColumnRules(Mode.InitialSetup, moduleEntity, viewColumnEntity);

			// Set Module Level Rules after Column Rules
			SetModuleRulesAfterColumnRules(Mode.InitialSetup, moduleEntity);
		}

		public void am_ViewColumnsAddedToModule(AB_GenerationModuleEntity moduleEntity)
		{
			if (moduleEntity == null || moduleEntity.AllColumns == null) return;

			// Set Module Level Rules before Column Rules
			SetModuleRulesBeforeColumnRules(Mode.ColumnsChanged, moduleEntity);

			// Set Generation defaults for each Column
			foreach (var viewColumnEntity in moduleEntity.AllColumns)
				SetColumnRules(Mode.ColumnsChanged, moduleEntity, viewColumnEntity);

			// Set Module Level Rules after Column Rules
			SetModuleRulesAfterColumnRules(Mode.ColumnsChanged, moduleEntity);
		}

		public void am_BeforeAddJoinColumnToModule(AB_GenerationModuleEntity moduleEntity, AB_GenerationViewColumnEntity joinField)
		{
			// Use the foreign key name minus the "id". Concat with "Name" if that exists in join field description, otherwise use full joinfield description
			var cd = joinField.JoinRelationship.KeyMaps.FirstOrDefault().SelectedForeignKeyViewColumn.ColumnDescription;
			if (cd.ToUpper().EndsWith("INTERNAL ID")) { cd = cd.Remove(cd.Length - 11).TrimEnd(); }

			// Gets the foreign key name and removes "Internal ID" from the end
			var ep = joinField.JoinRelationship.KeyMaps.FirstOrDefault().SelectedForeignKeyViewColumn.EntityPropertyName;
			if (ep.ToUpper().EndsWith("INTERNALID")) { ep = ep.Remove(ep.Length - 10).TrimEnd(); }

			if (joinField.JoinFieldDescription.ToUpper().Contains("NAME"))
			{
				joinField.ColumnDescription = string.Format("{0} {1}", cd, "Name");
				joinField.EntityPropertyName = string.Format("{0}{1}", ep, "Name");
			}
			else
			{
				joinField.ColumnDescription = string.Format("{0} {1}", cd, joinField.JoinFieldDescription);
				joinField.EntityPropertyName = string.Format("{0}{1}", ep, joinField.JoinEntityPropertyName);
			}
		}

		public void am_AllModulesCompletedLoading(ObservableCollection<AB_GenerationModuleEntity> generationModuleCollection)
		{ }

		#endregion

		#region Rules

		internal void SetModuleRulesBeforeColumnRules(Mode mode, AB_GenerationModuleEntity moduleEntity)
		{
			switch (mode)
			{
				case Mode.InitialSetup:
					// Set Module Name. This will also set the image name
					moduleEntity.ModuleName = A4DNPluginHelpers.FormatModuleName(moduleEntity.FileDescription);

					// Set the Module Description to Module Name
					moduleEntity.ModuleDescription = moduleEntity.ModuleName;

					// Module has Auto Generated Keys
					moduleEntity.FileHasAutoGeneratedKey = true;
					break;

				case Mode.ColumnsChanged:
					break;
			}
		}

		internal void SetColumnRules(Mode mode, AB_GenerationModuleEntity moduleEntity, AB_GenerationViewColumnEntity viewColumnEntity)
		{
			var currentTable = (EasyBuyTable)Enum.Parse(typeof(EasyBuyTable), moduleEntity.TableDescription.Replace(" ", ""));

			switch (mode)
			{
				case Mode.InitialSetup:

					// Set Exclude From Content Fields
					var excludeFromContentFields = EasyBuyHelpers.GetDefinedFieldsForTable(currentTable, A4DNFieldType.ExcludeFromContent);
					viewColumnEntity.IsContentWindowField = !viewColumnEntity.IsFieldMatch(excludeFromContentFields);

					// Set Exclude From Search Fields
					var excludeFromSearchFields = EasyBuyHelpers.GetDefinedFieldsForTable(currentTable, A4DNFieldType.ExcludeFromSearch);
					viewColumnEntity.IsExplorerBarField = !viewColumnEntity.IsFieldMatch(excludeFromSearchFields);

					// Set Exclude From Detail Fields
					var excludeFromDetailFields = EasyBuyHelpers.GetDefinedFieldsForTable(currentTable, A4DNFieldType.ExcludeFromDetail);
					viewColumnEntity.IsDetailField = !viewColumnEntity.IsFieldMatch(excludeFromDetailFields);

					// Set Hidden Fields
					var hiddenFields = EasyBuyHelpers.GetDefinedFieldsForTable(currentTable, A4DNFieldType.Hidden);
					viewColumnEntity.Visible = !viewColumnEntity.IsFieldMatch(hiddenFields);

					// Set Identity Fields
					var identityFields = EasyBuyHelpers.GetDefinedFieldsForTable(currentTable, A4DNFieldType.Identity);
					if (viewColumnEntity.IsFieldMatch(identityFields) && viewColumnEntity.IsKey)
					{
						viewColumnEntity.IsIdentity = false;
						viewColumnEntity.IsRequiredField = false;
						viewColumnEntity.IsAutoIncrementedInCode = true;
					}

					// Set Audit Fields
					var auditFields = EasyBuyHelpers.GetDefinedFieldsForTable(currentTable, A4DNFieldType.Audit);
					if (viewColumnEntity.IsFieldMatch(auditFields))
					{
						viewColumnEntity.IsDetailField = false;
						viewColumnEntity.IsAuditStampField = true;
						viewColumnEntity.AuditStampFieldType = EasyBuyHelpers.AuditStampType(viewColumnEntity.Name, DBType.Legacy);
					}

					// Set Required Fields
					var requiredFields = EasyBuyHelpers.GetDefinedFieldsForTable(currentTable, A4DNFieldType.Required);
					viewColumnEntity.IsRequiredField = viewColumnEntity.IsFieldMatch(requiredFields);

					// Set Title Fields
					var titleFields = EasyBuyHelpers.GetDefinedFieldsForTable(currentTable, A4DNFieldType.Title);
					viewColumnEntity.IsTitleField = viewColumnEntity.IsFieldMatch(titleFields);
					if (!viewColumnEntity.IsTitleField) //If not a title field, then hide on small devices
						viewColumnEntity.WebMarkupTHDataAttributes = "data-hide=\"phone,tablet\"";

					// Set Currency Fields
					var currencyFields = EasyBuyHelpers.GetDefinedFieldsForTable(currentTable, A4DNFieldType.Currency);
					if (viewColumnEntity.IsFieldMatch(currencyFields))
						viewColumnEntity.FieldVisualization = AB_FieldVisualizations.AB_Currency;

					// Set Percent Fields
					var percentFields = EasyBuyHelpers.GetDefinedFieldsForTable(currentTable, A4DNFieldType.Percent);
					if (viewColumnEntity.IsFieldMatch(percentFields))
						viewColumnEntity.FieldVisualization = AB_FieldVisualizations.AB_Percent;

					// Set Extended Search Fields
					var extendedSearchFields = EasyBuyHelpers.GetDefinedFieldsForTable(currentTable, A4DNFieldType.ExtendedSearch);
					if (viewColumnEntity.IsFieldMatch(extendedSearchFields) || viewColumnEntity.IsAuditStampField || (viewColumnEntity.IsKey && viewColumnEntity.IsIdentity))
					{
						viewColumnEntity.IsExplorerBarField = true;
						viewColumnEntity.IsExtendedSearchField = true;
						viewColumnEntity.IsContentWindowField = true;
						viewColumnEntity.ShowInExtendedView = true;
					}
					else
					{
						viewColumnEntity.IsExtendedSearchField = false;
						viewColumnEntity.ShowInExtendedView = false;
					}

					if (viewColumnEntity.IsKey)
					{
						viewColumnEntity.IsContentWindowField = true;
						viewColumnEntity.ShowInExtendedView = false;
						viewColumnEntity.Visible = false;
					}

					// This is done to eliminate conflicts with having the Internal ID referenced multiple times in a file
					if (viewColumnEntity.EntityPropertyName.ToUpper() == "INTERNALID")
					{
						viewColumnEntity.EntityPropertyName = moduleEntity.ModuleName.Replace(" ", "") + "InternalID";
						viewColumnEntity.ColumnDescription = moduleEntity.ModuleName + " Internal ID";
					}

					// Set Numeric(8) date fields as Property Type of DateTime and Field Visualization of Date
					var dateFields = EasyBuyHelpers.GetDefinedFieldsForTable(currentTable, A4DNFieldType.Date);
					if (viewColumnEntity.IsFieldMatch(dateFields) && (viewColumnEntity.Type == "NUMERIC(8.0)" || viewColumnEntity.Type == "DATE(4)"))
					{
						viewColumnEntity.AdditionalDataMapParameters = "databaseFieldType: AB_EntityFieldType.Date";
						viewColumnEntity.PropertyType = AB_PropertyTypes.DateTime;
						viewColumnEntity.FieldVisualization = AB_FieldVisualizations.AB_DatePicker;

						if ((viewColumnEntity.Type == "NUMERIC(8.0)"))
						{
							viewColumnEntity.AdditionalDataMapParameters = "databaseFieldType: AB_EntityFieldType.Decimal";
						}
					}

					// Set Numeric(6) Time fields as Property Type of TimeSpan and Field Visualization of Time
					var timeFields = EasyBuyHelpers.GetDefinedFieldsForTable(currentTable, A4DNFieldType.Time);
					if (viewColumnEntity.IsFieldMatch(timeFields) && (viewColumnEntity.Type == "NUMERIC(6.0)"))
					{
						viewColumnEntity.PropertyType = AB_PropertyTypes.TimeSpan;
						viewColumnEntity.FieldVisualization = AB_FieldVisualizations.AB_TimePicker;
						viewColumnEntity.AdditionalDataMapParameters = "databaseFieldType: AB_EntityFieldType.Decimal";
					}

					// If the field has not already been set to a Title Field, set any Date or Time fields that are not Audit Stamps to be added to the title
					if (!viewColumnEntity.IsTitleField)
						viewColumnEntity.IsTitleField = (viewColumnEntity.IsFieldMatch(dateFields) || viewColumnEntity.IsFieldMatch(timeFields)) && !viewColumnEntity.IsFieldMatch(auditFields);

					break;

				case Mode.ColumnsChanged:
					if (viewColumnEntity.IsVirtual)
					{
						//Do Not Check Virtuals on the Detail Tab
						viewColumnEntity.IsDetailField = false;

						// Uncheck Real Fields Content Window that make up the Virtual Field
						if (viewColumnEntity.VirtualFieldType == AB_VirtualFieldTypes.Concatenation)
						{
							foreach (var vce in from vcf in viewColumnEntity.VirtualCalculationFields where vcf.VirtualPropertyType == AB_VirtualPropertyType.Field from vce in moduleEntity.AllColumns where vce.EntityPropertyName == vcf.VirtualPropertyName select vce)
							{
								vce.Visible = false;
								viewColumnEntity.ContentWindowDisplaySequence = vce.ContentWindowDisplaySequence += 1;
							}
						}
					}
					break;
			}
		}

		internal void SetModuleRulesAfterColumnRules(Mode mode, AB_GenerationModuleEntity moduleEntity)
		{
			switch (mode)
			{
				case Mode.InitialSetup:

					// Set the Default View
					_defaultViewSet = false;
					if (moduleEntity.GenerationModuleExplorers[0] != null && moduleEntity.GenerationModuleExplorers[0].GenerationModuleExplorerViews != null)
					{
						foreach (var view in moduleEntity.GenerationModuleExplorers[0].GenerationModuleExplorerViews.OrderBy(x => x.ViewName))
						{
							_SetDefaultView(view, moduleEntity);
						}
					}

					// Add View By Name if there is a name field and Set to Default
					WizardShared.AddViewByViewField(moduleEntity, "Name");

					// Set the Drop Down Label to Module Name + Field Name/Desc
					foreach (var dd in moduleEntity.DropDowns)
					{
						foreach (var ddViewFields in dd.DropDownViewFields.Where(ddViewFields => ddViewFields.ColumnDescription.ToUpper().Equals("NAME")))
						{
							dd.DropDownLabel = moduleEntity.ModuleName + " " + ddViewFields.ColumnDescription;

							break;
						}
					}

					break;

				case Mode.ColumnsChanged:
					break;
			}

			A4DNPluginHelpers.MoveFieldsInContentWindow(moduleEntity);

			// Uncheck internal Key for Title if other non-key fields are checked and the key is an Identity or AutoGenerated Field
			if (moduleEntity.AllColumns.Count(p => p.IsTitleField && !p.IsKey) > 0)
			{
				moduleEntity.AllColumns.Where(t => t.IsKey && (t.IsIdentity || t.IsAutoIncrementedInCode)).ForEach(u => u.IsTitleField = false);
			}
		}

		#endregion

		private bool _defaultViewSet;

		private void _SetDefaultView(AB_GenerationModuleExplorerViewEntity viewEntity, AB_GenerationModuleEntity moduleEntity)
		{
			const string defaultViewSuffix = "LF1";

			if (viewEntity.ViewName.ToUpper().EndsWith(defaultViewSuffix.ToUpper()) && viewEntity.Description.ToUpper().Contains("NAME"))
			{
				if (!_defaultViewSet)
				{
					WizardShared.am_SetDefaultView(viewEntity, moduleEntity);
					_defaultViewSet = true;
				}
			}
		}
	}
}